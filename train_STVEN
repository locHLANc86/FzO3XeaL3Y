###   it is just for research purpose, and commercial use is not allowed  ###

import torch
from models.STVEN import *

'''  ###############################################################
#
#   Step 1: loss functions for STVEN 
#          1.1   torch.mean(torch.abs(x_reconst - video_y_GT))  for L1 reconstruction loss
#          1.2   psnr()  for L2 reconstruction loss
#          1.3   torch.mean(torch.abs(x_reconst -video_x_GT)) Cycle reconstruction loss
#
'''  ###############################################################

def psnr(self, img, img_g):
        
        criterionMSE = nn.MSELoss() #.to(device)
        mse = criterionMSE(img, img_g)
        psnr = 10 * torch.log10(1./ (mse+10e-8)) #20 *

        return  psnr



'''   ###############################################################
#
#   Step 2: Forward model and calculate the losses  
#           # input 1: facial frames --> [3, 64, 128, 128]
            # input 2: target label mask --> 5D vector 
#			# video_GroudTruth: the original video (before highly compressed)
#            
#            2.1  Forward the model, Generate video from original video to the target video
#            2.2  Calculate the reconstruction loss
#            2.3  Calculate the PSNR loss
#            2.4  Calculate the cycle loss       
#
'''   ###############################################################


model = STVEN_Generator()

x_reconst = model(video_1, traget_label1)

L1_loss = torch.mean(torch.abs(x_reconst - video_GroudTruth))
Loss_PSNR = psnr(x_reconst, video_GroudTruth)

x_fake = model(x_reconst, original_label1)

L1_loss_cycle = torch.mean(torch.abs(x_fake - video_1))
Loss_PSNR_cycle = psnr(x_fake, video_1)  


'''   ###############################################################
#
#   Step 3:  loss fusion and BP  
#
'''   ###############################################################

loss = 100*L1_loss + Loss_PSNR+ 100*L1_loss_cycle + Loss_PSNR_cycle

loss.backward()

